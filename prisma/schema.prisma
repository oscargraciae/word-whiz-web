// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://chambita:vQTvpdRJJ5tvg60q@cluster0.qxxjx.mongodb.net/sharecontacts?retryWrites=true&w=majority"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  card          Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Card {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String           @default("")
  description     String?
  userId          String
  cardSocialLinks CardSocialLink[]
  slug            String           @unique
  cover           String?
  avatar          String?
  city            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cards")
}

model CardSocialLink {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  cardId       String
  socialTypeId String

  card       Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
  socialType SocialType @relation(fields: [socialTypeId], references: [id], onDelete: Cascade)

  @@map("card_social_links")
}

model SocialType {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  prefixurl String
  logo      String

  CardSocialLink CardSocialLink[]
  @@map("social_types")
}
