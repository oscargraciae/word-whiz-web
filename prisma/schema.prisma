// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://chambita:vQTvpdRJJ5tvg60q@cluster0.qxxjx.mongodb.net/learning?retryWrites=true&w=majority"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  score             Int                 @default(0)
  accounts          Account[]
  sessions          Session[]
  vocabularyLearned VocabularyLearned[]
  lessonUser        LessonUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Topic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessons Lesson[]

  @@map("topics")
}

model Lesson {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String              @unique
  description       String?
  image             String?
  isActive          Boolean             @default(true)
  order             Int                 @default(0)
  topicId           String              @map("topicId")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  vocabulary        Vocabulary[]
  topic             Topic               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  lessonUsers       LessonUser[]
  vocabularyLearned VocabularyLearned[]

  @@map("lessons")
}

model Vocabulary {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  wordSpanish        String              @unique @map("word_spanish")
  wordEnglish        String              @unique @map("word_english")
  descriptionSpanish String?             @map("description_spanish")
  descriptionEnglish String?             @map("description_english")
  image              String?
  lessonId           String
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lesson             Lesson              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  wordsExamples      Sentence[]
  vocabularyLearned   VocabularyLearned[]

  @@map("vocabularies")
}

model Sentence {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  vocabularyId    String
  sentenceSpanish String     @map("sentence_spanish")
  sentenceEnglish String     @map("sentence_english")
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  vocabulary      Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)

  @@map("sentences")
}

model VocabularyLearned {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  vocabularyId   String     @unique
  userId         String
  lessonId       String
  correctTimes   Int        @default(0)
  timesPractices Int        @default(0)
  level          String     @default("beginner") // @enum(["beginner", "intermediate", "advanced"])
  progress       Int        @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  vocabulary     Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson         Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model LessonUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  lessonId  String   @unique
  userId    String
  progress  Int      @default(0) // 0 - 100
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model WordLearned {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   timesWatched   Int      @default(0)
//   timesCorrect   Int      @default(0)
//   timesIncorrect Int      @default(0)
//   wordId         String
//   userId         String
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
//   word           Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
//   user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("wordslearned")
// }
